{"ast":null,"code":"'use strict';\n\nvar alphabet = require('./alphabet');\n\nvar build = require('./build');\n\nvar isValid = require('./is-valid'); // if you are using cluster or multiple servers use this to make each instance\n// has a unique value for worker\n// Note: I don't know if this is automatically set when using third\n// party cluster solutions such as pm2.\n\n\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\n/**\r\n * Set the seed.\r\n * Highly recommended if you don't want people to try to figure out your id schema.\r\n * exposed as shortid.seed(int)\r\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\r\n */\n\nfunction seed(seedValue) {\n  alphabet.seed(seedValue);\n  return module.exports;\n}\n/**\r\n * Set the cluster worker or machine id\r\n * exposed as shortid.worker(int)\r\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\r\n * returns shortid module so it can be chained.\r\n */\n\n\nfunction worker(workerId) {\n  clusterWorkerId = workerId;\n  return module.exports;\n}\n/**\r\n *\r\n * sets new characters to use in the alphabet\r\n * returns the shuffled alphabet\r\n */\n\n\nfunction characters(newCharacters) {\n  if (newCharacters !== undefined) {\n    alphabet.characters(newCharacters);\n  }\n\n  return alphabet.shuffled();\n}\n/**\r\n * Generate unique id\r\n * Returns string id\r\n */\n\n\nfunction generate() {\n  return build(clusterWorkerId);\n} // Export all other functions as properties of the generate function\n\n\nmodule.exports = generate;\nmodule.exports.generate = generate;\nmodule.exports.seed = seed;\nmodule.exports.worker = worker;\nmodule.exports.characters = characters;\nmodule.exports.isValid = isValid;","map":{"version":3,"sources":["A:/trello_clone/trello-1/node_modules/shortid/lib/index.js"],"names":["alphabet","require","build","isValid","clusterWorkerId","seed","seedValue","module","exports","worker","workerId","characters","newCharacters","undefined","shuffled","generate"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAtB;;AACA,IAAIC,KAAK,GAAGD,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,YAAD,CAArB,C,CAEA;AACA;AACA;AACA;;;AACA,IAAIG,eAAe,GAAGH,OAAO,CAAC,0BAAD,CAAP,IAAuC,CAA7D;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASI,IAAT,CAAcC,SAAd,EAAyB;AACrBN,EAAAA,QAAQ,CAACK,IAAT,CAAcC,SAAd;AACA,SAAOC,MAAM,CAACC,OAAd;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AACtBN,EAAAA,eAAe,GAAGM,QAAlB;AACA,SAAOH,MAAM,CAACC,OAAd;AACH;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASG,UAAT,CAAoBC,aAApB,EAAmC;AAC/B,MAAIA,aAAa,KAAKC,SAAtB,EAAiC;AAC7Bb,IAAAA,QAAQ,CAACW,UAAT,CAAoBC,aAApB;AACH;;AAED,SAAOZ,QAAQ,CAACc,QAAT,EAAP;AACH;AAED;AACA;AACA;AACA;;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAOb,KAAK,CAACE,eAAD,CAAZ;AACD,C,CAED;;;AACAG,MAAM,CAACC,OAAP,GAAiBO,QAAjB;AACAR,MAAM,CAACC,OAAP,CAAeO,QAAf,GAA0BA,QAA1B;AACAR,MAAM,CAACC,OAAP,CAAeH,IAAf,GAAsBA,IAAtB;AACAE,MAAM,CAACC,OAAP,CAAeC,MAAf,GAAwBA,MAAxB;AACAF,MAAM,CAACC,OAAP,CAAeG,UAAf,GAA4BA,UAA5B;AACAJ,MAAM,CAACC,OAAP,CAAeL,OAAf,GAAyBA,OAAzB","sourcesContent":["'use strict';\r\n\r\nvar alphabet = require('./alphabet');\r\nvar build = require('./build');\r\nvar isValid = require('./is-valid');\r\n\r\n// if you are using cluster or multiple servers use this to make each instance\r\n// has a unique value for worker\r\n// Note: I don't know if this is automatically set when using third\r\n// party cluster solutions such as pm2.\r\nvar clusterWorkerId = require('./util/cluster-worker-id') || 0;\r\n\r\n/**\r\n * Set the seed.\r\n * Highly recommended if you don't want people to try to figure out your id schema.\r\n * exposed as shortid.seed(int)\r\n * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.\r\n */\r\nfunction seed(seedValue) {\r\n    alphabet.seed(seedValue);\r\n    return module.exports;\r\n}\r\n\r\n/**\r\n * Set the cluster worker or machine id\r\n * exposed as shortid.worker(int)\r\n * @param workerId worker must be positive integer.  Number less than 16 is recommended.\r\n * returns shortid module so it can be chained.\r\n */\r\nfunction worker(workerId) {\r\n    clusterWorkerId = workerId;\r\n    return module.exports;\r\n}\r\n\r\n/**\r\n *\r\n * sets new characters to use in the alphabet\r\n * returns the shuffled alphabet\r\n */\r\nfunction characters(newCharacters) {\r\n    if (newCharacters !== undefined) {\r\n        alphabet.characters(newCharacters);\r\n    }\r\n\r\n    return alphabet.shuffled();\r\n}\r\n\r\n/**\r\n * Generate unique id\r\n * Returns string id\r\n */\r\nfunction generate() {\r\n  return build(clusterWorkerId);\r\n}\r\n\r\n// Export all other functions as properties of the generate function\r\nmodule.exports = generate;\r\nmodule.exports.generate = generate;\r\nmodule.exports.seed = seed;\r\nmodule.exports.worker = worker;\r\nmodule.exports.characters = characters;\r\nmodule.exports.isValid = isValid;\r\n"]},"metadata":{},"sourceType":"script"}