{"ast":null,"code":"import _objectWithoutProperties from \"A:/trello_clone/trello-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _toPropertyKey from \"A:/trello_clone/trello-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectSpread from \"A:/trello_clone/trello-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"A:/trello_clone/trello-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"A:/trello_clone/trello-1/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { combineReducers, createStore } from \"redux\";\nimport throttle from \"lodash.throttle\";\nimport seed from \"./seed\";\n\nvar board = function board() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    lists: []\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        var listId = action.payload.listId;\n        return {\n          lists: [].concat(_toConsumableArray(state.lists), [listId])\n        };\n      }\n\n    case \"MOVE_LIST\":\n      {\n        var _action$payload = action.payload,\n            oldListIndex = _action$payload.oldListIndex,\n            newListIndex = _action$payload.newListIndex;\n        var newLists = Array.from(state.lists);\n\n        var _newLists$splice = newLists.splice(oldListIndex, 1),\n            _newLists$splice2 = _slicedToArray(_newLists$splice, 1),\n            removedList = _newLists$splice2[0];\n\n        newLists.splice(newListIndex, 0, removedList);\n        return {\n          lists: newLists\n        };\n      }\n\n    case \"DELETE_LIST\":\n      {\n        var _listId = action.payload.listId;\n\n        var filterDeleted = function filterDeleted(tmpListId) {\n          return tmpListId !== _listId;\n        };\n\n        var _newLists = state.lists.filter(filterDeleted);\n\n        return {\n          lists: _newLists\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar listsById = function listsById() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_LIST\":\n      {\n        var _action$payload2 = action.payload,\n            listId = _action$payload2.listId,\n            listTitle = _action$payload2.listTitle;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [listId]: {\n            _id: listId,\n            title: listTitle,\n            cards: []\n          }\n        });\n      }\n\n    case \"CHANGE_LIST_TITLE\":\n      {\n        var _action$payload3 = action.payload,\n            _listId2 = _action$payload3.listId,\n            _listTitle = _action$payload3.listTitle;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [_listId2]: _objectSpread(_objectSpread({}, state[_listId2]), {}, {\n            title: _listTitle\n          })\n        });\n      }\n\n    case \"DELETE_LIST\":\n      {\n        var _listId3 = action.payload.listId;\n\n        var deletedList = state[_listId3],\n            restOfLists = _objectWithoutProperties(state, [_listId3].map(_toPropertyKey));\n\n        return restOfLists;\n      }\n\n    case \"ADD_CARD\":\n      {\n        var _action$payload4 = action.payload,\n            _listId4 = _action$payload4.listId,\n            cardId = _action$payload4.cardId;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [_listId4]: _objectSpread(_objectSpread({}, state[_listId4]), {}, {\n            cards: [].concat(_toConsumableArray(state[_listId4].cards), [cardId])\n          })\n        });\n      }\n\n    case \"MOVE_CARD\":\n      {\n        var _action$payload5 = action.payload,\n            oldCardIndex = _action$payload5.oldCardIndex,\n            newCardIndex = _action$payload5.newCardIndex,\n            sourceListId = _action$payload5.sourceListId,\n            destListId = _action$payload5.destListId; // Move within the same list\n\n        if (sourceListId === destListId) {\n          var newCards = Array.from(state[sourceListId].cards);\n\n          var _newCards$splice = newCards.splice(oldCardIndex, 1),\n              _newCards$splice2 = _slicedToArray(_newCards$splice, 1),\n              _removedCard = _newCards$splice2[0];\n\n          newCards.splice(newCardIndex, 0, _removedCard);\n          return _objectSpread(_objectSpread({}, state), {}, {\n            [sourceListId]: _objectSpread(_objectSpread({}, state[sourceListId]), {}, {\n              cards: newCards\n            })\n          });\n        } // Move card from one list to another\n\n\n        var sourceCards = Array.from(state[sourceListId].cards);\n\n        var _sourceCards$splice = sourceCards.splice(oldCardIndex, 1),\n            _sourceCards$splice2 = _slicedToArray(_sourceCards$splice, 1),\n            removedCard = _sourceCards$splice2[0];\n\n        var destinationCards = Array.from(state[destListId].cards);\n        destinationCards.splice(newCardIndex, 0, removedCard);\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [sourceListId]: _objectSpread(_objectSpread({}, state[sourceListId]), {}, {\n            cards: sourceCards\n          }),\n          [destListId]: _objectSpread(_objectSpread({}, state[destListId]), {}, {\n            cards: destinationCards\n          })\n        });\n      }\n\n    case \"DELETE_CARD\":\n      {\n        var _action$payload6 = action.payload,\n            deletedCardId = _action$payload6.cardId,\n            _listId5 = _action$payload6.listId;\n\n        var filterDeleted = function filterDeleted(cardId) {\n          return cardId !== deletedCardId;\n        };\n\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [_listId5]: _objectSpread(_objectSpread({}, state[_listId5]), {}, {\n            cards: state[_listId5].cards.filter(filterDeleted)\n          })\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar cardsById = function cardsById() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD_CARD\":\n      {\n        var _action$payload7 = action.payload,\n            cardText = _action$payload7.cardText,\n            cardId = _action$payload7.cardId;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [cardId]: {\n            text: cardText,\n            _id: cardId\n          }\n        });\n      }\n\n    case \"CHANGE_CARD_TEXT\":\n      {\n        var _action$payload8 = action.payload,\n            _cardText = _action$payload8.cardText,\n            _cardId = _action$payload8.cardId;\n        return _objectSpread(_objectSpread({}, state), {}, {\n          [_cardId]: _objectSpread(_objectSpread({}, state[_cardId]), {}, {\n            text: _cardText\n          })\n        });\n      }\n\n    case \"DELETE_CARD\":\n      {\n        var _cardId2 = action.payload.cardId;\n\n        var deletedCard = state[_cardId2],\n            restOfCards = _objectWithoutProperties(state, [_cardId2].map(_toPropertyKey));\n\n        return restOfCards;\n      }\n    // Find every card from the deleted list and remove it\n\n    case \"DELETE_LIST\":\n      {\n        var cardIds = action.payload.cards;\n        return Object.keys(state).filter(function (cardId) {\n          return !cardIds.includes(cardId);\n        }).reduce(function (newState, cardId) {\n          return _objectSpread(_objectSpread({}, newState), {}, {\n            [cardId]: state[cardId]\n          });\n        }, {});\n      }\n\n    default:\n      return state;\n  }\n};\n\nvar reducers = combineReducers({\n  board: board,\n  listsById: listsById,\n  cardsById: cardsById\n});\n\nvar saveState = function saveState(state) {\n  try {\n    var serializedState = JSON.stringify(state);\n    localStorage.setItem(\"state\", serializedState);\n  } catch (_unused) {// ignore write errors\n  }\n};\n\nvar loadState = function loadState() {\n  try {\n    var serializedState = localStorage.getItem(\"state\");\n\n    if (serializedState === null) {\n      return undefined;\n    }\n\n    return JSON.parse(serializedState);\n  } catch (err) {\n    return undefined;\n  }\n};\n\nvar persistedState = loadState();\nvar store = createStore(reducers, persistedState);\nstore.subscribe(throttle(function () {\n  saveState(store.getState());\n}, 1000));\nconsole.log(store.getState());\n\nif (!store.getState().board.lists.length) {\n  console.log(\"SEED\");\n  seed(store);\n}\n\nexport default store;","map":{"version":3,"sources":["A:/trello_clone/trello-1/src/store.js"],"names":["combineReducers","createStore","throttle","seed","board","state","lists","action","type","listId","payload","oldListIndex","newListIndex","newLists","Array","from","splice","removedList","filterDeleted","tmpListId","filter","listsById","listTitle","_id","title","cards","deletedList","restOfLists","cardId","oldCardIndex","newCardIndex","sourceListId","destListId","newCards","removedCard","sourceCards","destinationCards","deletedCardId","cardsById","cardText","text","deletedCard","restOfCards","cardIds","Object","keys","includes","reduce","newState","reducers","saveState","serializedState","JSON","stringify","localStorage","setItem","loadState","getItem","undefined","parse","err","persistedState","store","subscribe","getState","console","log","length"],"mappings":"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","sourcesContent":["import { combineReducers, createStore } from \"redux\";\r\nimport throttle from \"lodash.throttle\";\r\nimport seed from \"./seed\";\r\n\r\nconst board = (state = { lists: [] }, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_LIST\": {\r\n      const { listId } = action.payload;\r\n      return { lists: [...state.lists, listId] };\r\n    }\r\n    case \"MOVE_LIST\": {\r\n      const { oldListIndex, newListIndex } = action.payload;\r\n      const newLists = Array.from(state.lists);\r\n      const [removedList] = newLists.splice(oldListIndex, 1);\r\n      newLists.splice(newListIndex, 0, removedList);\r\n      return { lists: newLists };\r\n    }\r\n    case \"DELETE_LIST\": {\r\n      const { listId } = action.payload;\r\n      const filterDeleted = tmpListId => tmpListId !== listId;\r\n      const newLists = state.lists.filter(filterDeleted);\r\n      return { lists: newLists };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst listsById = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_LIST\": {\r\n      const { listId, listTitle } = action.payload;\r\n      return {\r\n        ...state,\r\n        [listId]: { _id: listId, title: listTitle, cards: [] }\r\n      };\r\n    }\r\n    case \"CHANGE_LIST_TITLE\": {\r\n      const { listId, listTitle } = action.payload;\r\n      return {\r\n        ...state,\r\n        [listId]: { ...state[listId], title: listTitle }\r\n      };\r\n    }\r\n    case \"DELETE_LIST\": {\r\n      const { listId } = action.payload;\r\n      const { [listId]: deletedList, ...restOfLists } = state;\r\n      return restOfLists;\r\n    }\r\n    case \"ADD_CARD\": {\r\n      const { listId, cardId } = action.payload;\r\n      return {\r\n        ...state,\r\n        [listId]: { ...state[listId], cards: [...state[listId].cards, cardId] }\r\n      };\r\n    }\r\n    case \"MOVE_CARD\": {\r\n      const {\r\n        oldCardIndex,\r\n        newCardIndex,\r\n        sourceListId,\r\n        destListId\r\n      } = action.payload;\r\n      // Move within the same list\r\n      if (sourceListId === destListId) {\r\n        const newCards = Array.from(state[sourceListId].cards);\r\n        const [removedCard] = newCards.splice(oldCardIndex, 1);\r\n        newCards.splice(newCardIndex, 0, removedCard);\r\n        return {\r\n          ...state,\r\n          [sourceListId]: { ...state[sourceListId], cards: newCards }\r\n        };\r\n      }\r\n      // Move card from one list to another\r\n      const sourceCards = Array.from(state[sourceListId].cards);\r\n      const [removedCard] = sourceCards.splice(oldCardIndex, 1);\r\n      const destinationCards = Array.from(state[destListId].cards);\r\n      destinationCards.splice(newCardIndex, 0, removedCard);\r\n      return {\r\n        ...state,\r\n        [sourceListId]: { ...state[sourceListId], cards: sourceCards },\r\n        [destListId]: { ...state[destListId], cards: destinationCards }\r\n      };\r\n    }\r\n    case \"DELETE_CARD\": {\r\n      const { cardId: deletedCardId, listId } = action.payload;\r\n      const filterDeleted = cardId => cardId !== deletedCardId;\r\n      return {\r\n        ...state,\r\n        [listId]: {\r\n          ...state[listId],\r\n          cards: state[listId].cards.filter(filterDeleted)\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst cardsById = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_CARD\": {\r\n      const { cardText, cardId } = action.payload;\r\n      return { ...state, [cardId]: { text: cardText, _id: cardId } };\r\n    }\r\n    case \"CHANGE_CARD_TEXT\": {\r\n      const { cardText, cardId } = action.payload;\r\n      return { ...state, [cardId]: { ...state[cardId], text: cardText } };\r\n    }\r\n    case \"DELETE_CARD\": {\r\n      const { cardId } = action.payload;\r\n      const { [cardId]: deletedCard, ...restOfCards } = state;\r\n      return restOfCards;\r\n    }\r\n    // Find every card from the deleted list and remove it\r\n    case \"DELETE_LIST\": {\r\n      const { cards: cardIds } = action.payload;\r\n      return Object.keys(state)\r\n        .filter(cardId => !cardIds.includes(cardId))\r\n        .reduce(\r\n          (newState, cardId) => ({ ...newState, [cardId]: state[cardId] }),\r\n          {}\r\n        );\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst reducers = combineReducers({\r\n  board,\r\n  listsById,\r\n  cardsById\r\n});\r\n\r\nconst saveState = state => {\r\n  try {\r\n    const serializedState = JSON.stringify(state);\r\n    localStorage.setItem(\"state\", serializedState);\r\n  } catch {\r\n    // ignore write errors\r\n  }\r\n};\r\n\r\nconst loadState = () => {\r\n  try {\r\n    const serializedState = localStorage.getItem(\"state\");\r\n    if (serializedState === null) {\r\n      return undefined;\r\n    }\r\n    return JSON.parse(serializedState);\r\n  } catch (err) {\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst persistedState = loadState();\r\nconst store = createStore(reducers, persistedState);\r\n\r\nstore.subscribe(\r\n  throttle(() => {\r\n    saveState(store.getState());\r\n  }, 1000)\r\n);\r\n\r\nconsole.log(store.getState());\r\nif (!store.getState().board.lists.length) {\r\n  console.log(\"SEED\");\r\n  seed(store);\r\n}\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}