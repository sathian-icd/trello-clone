{"ast":null,"code":"/**\r\n * Secure random string generator with custom alphabet.\r\n *\r\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\r\n * will not be secure.\r\n *\r\n * @param {generator} random The random bytes generator.\r\n * @param {string} alphabet Symbols to be used in new random string.\r\n * @param {size} size The number of symbols in new random string.\r\n *\r\n * @return {string} Random string.\r\n *\r\n * @example\r\n * const format = require('nanoid/format')\r\n *\r\n * function random (size) {\r\n *   const result = []\r\n *   for (let i = 0; i < size; i++) {\r\n *     result.push(randomByte())\r\n *   }\r\n *   return result\r\n * }\r\n *\r\n * format(random, \"abcdef\", 5) //=> \"fbaef\"\r\n *\r\n * @name format\r\n * @function\r\n */\nmodule.exports = function (random, alphabet, size) {\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1;\n  var step = Math.ceil(1.6 * mask * size / alphabet.length);\n  var id = '';\n\n  while (true) {\n    var bytes = random(step);\n\n    for (var i = 0; i < step; i++) {\n      var byte = bytes[i] & mask;\n\n      if (alphabet[byte]) {\n        id += alphabet[byte];\n        if (id.length === size) return id;\n      }\n    }\n  }\n};\n/**\r\n * @callback generator\r\n * @param {number} bytes The number of bytes to generate.\r\n * @return {number[]} Random bytes.\r\n */","map":{"version":3,"sources":["A:/trello_clone/trello-1/node_modules/nanoid/format.js"],"names":["module","exports","random","alphabet","size","mask","Math","log","length","LN2","step","ceil","id","bytes","i","byte"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,OAAP,GAAiB,UAAUC,MAAV,EAAkBC,QAAlB,EAA4BC,IAA5B,EAAkC;AACjD,MAAIC,IAAI,GAAG,CAAC,KAAKC,IAAI,CAACC,GAAL,CAASJ,QAAQ,CAACK,MAAT,GAAkB,CAA3B,IAAgCF,IAAI,CAACG,GAA3C,IAAkD,CAA7D;AACA,MAAIC,IAAI,GAAGJ,IAAI,CAACK,IAAL,CAAU,MAAMN,IAAN,GAAaD,IAAb,GAAoBD,QAAQ,CAACK,MAAvC,CAAX;AAEA,MAAII,EAAE,GAAG,EAAT;;AACA,SAAO,IAAP,EAAa;AACX,QAAIC,KAAK,GAAGX,MAAM,CAACQ,IAAD,CAAlB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7B,UAAIC,IAAI,GAAGF,KAAK,CAACC,CAAD,CAAL,GAAWT,IAAtB;;AACA,UAAIF,QAAQ,CAACY,IAAD,CAAZ,EAAoB;AAClBH,QAAAA,EAAE,IAAIT,QAAQ,CAACY,IAAD,CAAd;AACA,YAAIH,EAAE,CAACJ,MAAH,KAAcJ,IAAlB,EAAwB,OAAOQ,EAAP;AACzB;AACF;AACF;AACF,CAfD;AAiBA;AACA;AACA;AACA;AACA","sourcesContent":["/**\r\n * Secure random string generator with custom alphabet.\r\n *\r\n * Alphabet must contain 256 symbols or less. Otherwise, the generator\r\n * will not be secure.\r\n *\r\n * @param {generator} random The random bytes generator.\r\n * @param {string} alphabet Symbols to be used in new random string.\r\n * @param {size} size The number of symbols in new random string.\r\n *\r\n * @return {string} Random string.\r\n *\r\n * @example\r\n * const format = require('nanoid/format')\r\n *\r\n * function random (size) {\r\n *   const result = []\r\n *   for (let i = 0; i < size; i++) {\r\n *     result.push(randomByte())\r\n *   }\r\n *   return result\r\n * }\r\n *\r\n * format(random, \"abcdef\", 5) //=> \"fbaef\"\r\n *\r\n * @name format\r\n * @function\r\n */\r\nmodule.exports = function (random, alphabet, size) {\r\n  var mask = (2 << Math.log(alphabet.length - 1) / Math.LN2) - 1\r\n  var step = Math.ceil(1.6 * mask * size / alphabet.length)\r\n\r\n  var id = ''\r\n  while (true) {\r\n    var bytes = random(step)\r\n    for (var i = 0; i < step; i++) {\r\n      var byte = bytes[i] & mask\r\n      if (alphabet[byte]) {\r\n        id += alphabet[byte]\r\n        if (id.length === size) return id\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @callback generator\r\n * @param {number} bytes The number of bytes to generate.\r\n * @return {number[]} Random bytes.\r\n */\r\n"]},"metadata":{},"sourceType":"script"}